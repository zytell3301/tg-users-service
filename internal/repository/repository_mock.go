// Code generated by MockGen. DO NOT EDIT.
// Source: core/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/zytell3301/tg-users-service/internal/domain"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUsersRepository) DeleteUser(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersRepositoryMockRecorder) DeleteUser(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersRepository)(nil).DeleteUser), phone)
}

// DoesUserExists mocks base method.
func (m *MockUsersRepository) DoesUserExists(phone string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesUserExists", phone)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesUserExists indicates an expected call of DoesUserExists.
func (mr *MockUsersRepositoryMockRecorder) DoesUserExists(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesUserExists", reflect.TypeOf((*MockUsersRepository)(nil).DoesUserExists), phone)
}

// DoesUsernameExists mocks base method.
func (m *MockUsersRepository) DoesUsernameExists(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesUsernameExists", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesUsernameExists indicates an expected call of DoesUsernameExists.
func (mr *MockUsersRepositoryMockRecorder) DoesUsernameExists(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesUsernameExists", reflect.TypeOf((*MockUsersRepository)(nil).DoesUsernameExists), username)
}

// GetSecurityCode mocks base method.
func (m *MockUsersRepository) GetSecurityCode(phone string) (domain.SecurityCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityCode", phone)
	ret0, _ := ret[0].(domain.SecurityCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityCode indicates an expected call of GetSecurityCode.
func (mr *MockUsersRepositoryMockRecorder) GetSecurityCode(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityCode", reflect.TypeOf((*MockUsersRepository)(nil).GetSecurityCode), phone)
}

// GetUserByPhone mocks base method.
func (m *MockUsersRepository) GetUserByPhone(phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockUsersRepositoryMockRecorder) GetUserByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockUsersRepository)(nil).GetUserByPhone), phone)
}

// NewUser mocks base method.
func (m *MockUsersRepository) NewUser(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewUser indicates an expected call of NewUser.
func (mr *MockUsersRepositoryMockRecorder) NewUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUsersRepository)(nil).NewUser), user)
}

// RecordSecurityCode mocks base method.
func (m *MockUsersRepository) RecordSecurityCode(securityCode domain.SecurityCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordSecurityCode", securityCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordSecurityCode indicates an expected call of RecordSecurityCode.
func (mr *MockUsersRepositoryMockRecorder) RecordSecurityCode(securityCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordSecurityCode", reflect.TypeOf((*MockUsersRepository)(nil).RecordSecurityCode), securityCode)
}

// UpdateUsername mocks base method.
func (m *MockUsersRepository) UpdateUsername(phone, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", phone, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockUsersRepositoryMockRecorder) UpdateUsername(phone, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockUsersRepository)(nil).UpdateUsername), phone, username)
}
